

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yoon-Min</title>
  <subtitle>Android를 좋아하고 기록하는 사람입니다 :)</subtitle>
  <updated>2024-03-28T00:24:52+09:00</updated>
  <author>
    <name>SeungMinYoon</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2024 SeungMinYoon </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Kotlin - 고차 함수와 inline (2/2)</title>
    <link href="http://localhost:4000/posts/KotlinHighOrderFunction2/" rel="alternate" type="text/html" title="Kotlin - 고차 함수와 inline (2/2)" />
    <published>2024-03-19T00:00:00+09:00</published>
  
    <updated>2024-03-20T00:13:40+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinHighOrderFunction2/</id>
    <content src="http://localhost:4000/posts/KotlinHighOrderFunction2/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="프로그래밍 언어" />
    
  

  
    <summary>
      





      

Intro

저번 고차 함수와 인라인 1편에서 코틀린 함수가 왜 고차 함수인지 함수 타입과 함수 리터럴을 통해 알아봤습니다. 코틀린은 함수에 대한 타입을 제공하고 이를 통해서 함수를 인자로 활용하거나 반환값으로 활용할 수 있습니다. 특히 인자로 활용하는 과정에서 함수 리터럴을 활용하면 가독성이 뛰어난 코드 구현이 가능합니다.

이런 뛰어난 장점을 가진 고차 함수도 단점은 존재합니다. 이 때문에 코틀린은 고차 함수의 단점을 보완하기 위해 inline 이라는 키워드를 제공하여 고차 함수의 단점을 보완하는 데 도움을 제공합니다.

따라서 코틀린이 제공하는 함수형 프로그래밍을 제대로 활용하려면 고차 함수의 장점과 단점이 무엇인지 파악하고 사용해야 합니다. 이번 글에서는 고차 함수가 가지는 장점과 단점이 무...
    </summary>
  

  </entry>

  
  <entry>
    <title>Kotlin - 고차 함수와 inline (1/2)</title>
    <link href="http://localhost:4000/posts/KotlinHighOrderFunction/" rel="alternate" type="text/html" title="Kotlin - 고차 함수와 inline (1/2)" />
    <published>2024-03-13T00:00:00+09:00</published>
  
    <updated>2024-03-18T00:48:19+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinHighOrderFunction/</id>
    <content src="http://localhost:4000/posts/KotlinHighOrderFunction/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="프로그래밍 언어" />
    
  

  
    <summary>
      





      

Intro


  “Kotlin functions are first-class, which means they can be stored in variables and data structures, and can be passed as arguments to and returned from other higher-order functions. You can perform any operations on functions that are possible for other non-function values.”

  Kotlin docs


Kotlin 함수는 first-class - 일급 함수로, 변수와 데이터 구조에 저장할 수 있으며 다른 상위 함수에 인자로 전달하거나 반환 값으로 활용할 수 있습니다...
    </summary>
  

  </entry>

  
  <entry>
    <title>Android Retrofit - 인스턴스 생성과 API Interface의 동작 과정</title>
    <link href="http://localhost:4000/posts/Android-Retrofit-01/" rel="alternate" type="text/html" title="Android Retrofit - 인스턴스 생성과 API Interface의 동작 과정" />
    <published>2024-03-03T00:00:00+09:00</published>
  
    <updated>2024-03-03T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Android-Retrofit-01/</id>
    <content src="http://localhost:4000/posts/Android-Retrofit-01/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="Android" />
    
    <category term="라이브러리" />
    
  

  
    <summary>
      





      

Retrofit version - 2.9.0

Retrofit Intro


  A type-safe HTTP client for Android and Java - Square -


레트로핏은 Android, Java에서 사용되는 타입 세이프한 Http Client이며 안드로이드 애플리케이션에서 네트워크 요청 및 응답 처리에 대한 과정을 단순화시켜 주는 라이브러리입니다. 이 라이브러리를 알아보기 전에 레트로핏의 기반이 되는 OkHttpClient 가 무엇인지부터 알아야 할 필요가 있습니다.

Square에서 레트로핏 이전에 OkHttpClient 라는 Http Client를 먼저 제공했습니다. 이후에 OkHttpClient의 네트워크 처리 기능 기반에 어노테이션을 이용한 API 인터페이스로 응답을...
    </summary>
  

  </entry>

  
  <entry>
    <title>Kotlin - ArrayList와 MutableList, 무엇을 써야 할까?</title>
    <link href="http://localhost:4000/posts/Kotlin-ArrayList-MutableList-Difference/" rel="alternate" type="text/html" title="Kotlin - ArrayList와 MutableList, 무엇을 써야 할까?" />
    <published>2024-02-20T12:00:00+09:00</published>
  
    <updated>2024-02-22T19:43:06+09:00</updated>
  
    <id>http://localhost:4000/posts/Kotlin-ArrayList-MutableList-Difference/</id>
    <content src="http://localhost:4000/posts/Kotlin-ArrayList-MutableList-Difference/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="프로그래밍 언어" />
    
  

  
    <summary>
      





      

Collection

Kotlin Collection


  “The Kotlin Standard Library provides a comprehensive set of tools for managing collections – groups of a variable number of items (possibly zero) that are significant to the problem being solved and are commonly operated on.”

  Kotlin docs -


다양한 프로그래밍 언어에서 문제 해결을 위해 동일하거나 비슷한 의미를 가진 item 들이 하나의 그룹으로 제어된 방식으로 함께 동작하는 Collection 을 사용합니다. 코틀린에서 컬렉션은 4개의 메서드와...
    </summary>
  

  </entry>

  
  <entry>
    <title>Goodbye, 2023! Welcome, 2024! - [2023년 개발 회고]</title>
    <link href="http://localhost:4000/posts/Review2023/" rel="alternate" type="text/html" title="Goodbye, 2023! Welcome, 2024! - [2023년 개발 회고]" />
    <published>2024-01-24T12:00:00+09:00</published>
  
    <updated>2024-02-06T00:26:25+09:00</updated>
  
    <id>http://localhost:4000/posts/Review2023/</id>
    <content src="http://localhost:4000/posts/Review2023/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="블로그" />
    
    <category term="회고록" />
    
  

  
    <summary>
      





      2024년을 맞이하며

눈 깜짝할 사이에 2023년이 끝났다. 2023년은 여러 이벤트가 겹치면서 다양한 경험을 할 수 있었다. 사용하는 기술 스택에 대한 이해가 이전보다 나아졌고 무엇보다도 확실한 협업 경험을 통해 협업 능력이 높아진 부분에 대해서 상당히 만족하는 한 해였던 것 같다.

이런 소중한 경험들을 머릿속에 두었다간 금방 잊힐 게 눈에 보여서 블로그 글로 23년의 경험들을 정리하고자 한다. 그리고 이왕 회고 글 작성을 시작한 김에 2023년을 시작으로 계속해서 1년 단위 회고를 작성하고자 한다. 해마다 계속해서 쌓이는 회고들을 보면서 내 성장 과정을 확인한다면 뭐라도 느끼는 게 있지 않을까 싶어서다.

이 글이 나중에 뭐 어떤 식으로든 도움이 되길 바라며 이야기를 시작하겠다.

목차
1. 팀...
    </summary>
  

  </entry>

</feed>


