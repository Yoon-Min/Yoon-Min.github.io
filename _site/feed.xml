

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yoon-Min</title>
  <subtitle>부족한 개발 실력을 키우고 다른 사람들에게 도움이 되고 싶습니다.</subtitle>
  <updated>2023-11-19T23:45:47+09:00</updated>
  <author>
    <name>SeungMinYoon</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2023 SeungMinYoon </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>(프로그래머스 | Kotlin) - 매칭 점수</title>
    <link href="http://localhost:4000/posts/KotlinAlgorithm7/" rel="alternate" type="text/html" title="(프로그래머스 | Kotlin) - 매칭 점수" />
    <published>2023-11-19T21:00:00+09:00</published>
  
    <updated>2023-11-19T21:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinAlgorithm7/</id>
    <content src="http://localhost:4000/posts/KotlinAlgorithm7/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="알고리즘 문제" />
    
  

  
    <summary>
      





      해결 방법

정말 보자마자 머리가 지끈거리는 문제였다. 카카오 코테 문제를 풀어보면서 문자열 처리 로직을 많이 작성했었는데 설마 html 형식을 통째로 주는 건 상상도 못했다. 필요한 건 크게 url, 키워드, 외부 링크, 이렇게 세 가지다.

여기서 문제는 해당 세 가지를 구하기 위해서 정규식을 사용해야 하는데 나는 정규식을 사용할 때 항상 검색해서 복붙한 게 전부여서 식을 어떻게 작성해야 하는지 몰랐다. 그래서 검색을 해서 몇몇 정규식을 참고했다.

1. 현재 페이지의 URL

"(&amp;lt;meta property=\"og:url\" content=\"(\\S*)//(\\S*)\"/&amp;gt;)"


페이지의 url 을 구할 때 중요한 점은 문제에서 준 양식과 정확히 일치해야 한다는 것이다. 보니까 ur...
    </summary>
  

  </entry>

  
  <entry>
    <title>(프로그래머스 | Kotlin) - 수식 최대화</title>
    <link href="http://localhost:4000/posts/KotlinAlgorithm6/" rel="alternate" type="text/html" title="(프로그래머스 | Kotlin) - 수식 최대화" />
    <published>2023-11-15T12:00:00+09:00</published>
  
    <updated>2023-11-15T12:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinAlgorithm6/</id>
    <content src="http://localhost:4000/posts/KotlinAlgorithm6/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="알고리즘 문제" />
    
  

  
    <summary>
      





      해결 방법

뭔가 풀이 방법이 다양할 것 같은 문제인데 나는 재귀를 이용해서 해결했다. 연산 기호가 최대 세 개인데 연산 우선순위를 리스트로 표현했다. 예를 들어서 표현식에서 사용된 연산 기호가 * - , 2개라면 만들 수 있는 우선순위 조합은 2개, [[*, -], [-, *]]  이렇게 리스트로 표현이 가능하다. 인덱스가 클수록 연산 우선순위가 높다는 뜻이다.

이런 식으로 만들 수 있는 연산 우선순위를 모두 만들고 모든 경우에 대해 식을 계산하고 결과값을 비교해서 가장 큰 값을 리턴하면 문제 해결이 가능하다. 그런데 문제는 식을 계산하는 방법이다. 여기서 풀이 방법이 다양하게 갈릴 것 같은데 내가 푼 방법은 다음과 같다.

​

1. 나올 수 있는 연산 우선순위 조합 모두 구하기

"100-200...
    </summary>
  

  </entry>

  
  <entry>
    <title>Kotlin Generic (1) 제네릭 클래스와 함수, 그리고 변성</title>
    <link href="http://localhost:4000/posts/Kotlin-Generic/" rel="alternate" type="text/html" title="Kotlin Generic (1) 제네릭 클래스와 함수, 그리고 변성" />
    <published>2023-11-09T12:00:00+09:00</published>
  
    <updated>2023-11-09T16:18:22+09:00</updated>
  
    <id>http://localhost:4000/posts/Kotlin-Generic/</id>
    <content src="http://localhost:4000/posts/Kotlin-Generic/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="프로그래밍 언어" />
    
  

  
    <summary>
      





      Kotlin도 Java의 제네릭 기능을 제공한다.


  “Classes in Kotlin can have type parameters, just like in Java:” - Kotlin 공식 문서


코틀린의 클래스는 자바와 마찬가지로 타입 파라미터를 가질 수 있습니다. 제네릭을 사용함으로써 컴파일 타임에 타입 안전성을 관리할 수 있고 여러 타입에 대응하여 코드를 재사용하는 이점을 얻을 수 있습니다.

코틀린 역시  &amp;lt;&amp;gt; 기호를 이용한 제네릭 기능을 제공합니다. 다음 Box 클래스는 제네릭을 사용하여 만들어졌기 때문에  Int , String, Float 등의 다양한 타입을 가질 수 있습니다.

class Box&amp;lt;T&amp;gt;(t: T) {
    var value = t
}


val...
    </summary>
  

  </entry>

  
  <entry>
    <title>Android BuildConfig 적용 안되는 현상</title>
    <link href="http://localhost:4000/posts/Android-BuildConfig/" rel="alternate" type="text/html" title="Android BuildConfig 적용 안되는 현상" />
    <published>2023-11-01T12:00:00+09:00</published>
  
    <updated>2023-11-01T12:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/Android-BuildConfig/</id>
    <content src="http://localhost:4000/posts/Android-BuildConfig/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="Android" />
    
    <category term="이슈" />
    
  

  
    <summary>
      





      빌드를 다시 해봐도 BuildConfig 가 없음

BuildConfig 는 보통 노출되면 안되는 값을 저장할 때 사용되곤 합니다. 그래서 프로젝트를 몇번 해봤다면 해당 기능을 사용해봤을 겁니다. 보통 서버 주소나 API 키와 같은 중요한 값들을 로컬 프로퍼티에 저장을 하고 재빌드를 해서 BuildConfig 를 참조하게 됩니다. 그런데 재빌드를 했음에도 불구하고 BuildConfig 가 참조되지 않는 경우가 있었을 겁니다.

AGP 8.0 부터 BuildConfig 는 기본으로 적용되지 않음

빌드 퍼포먼스 향상을 위해서 그래들 플러그인 8.0 버전부터는 BuildConfig 생성이 되지 않도록 변경됐습니다.

Android 공식문서 내용 발췌


  Starting with AGP 8.0, the ...
    </summary>
  

  </entry>

  
  <entry>
    <title>Android 구글 로그인 구현하기</title>
    <link href="http://localhost:4000/posts/Android-Google-Login/" rel="alternate" type="text/html" title="Android 구글 로그인 구현하기" />
    <published>2023-10-31T22:00:00+09:00</published>
  
    <updated>2023-10-31T23:21:11+09:00</updated>
  
    <id>http://localhost:4000/posts/Android-Google-Login/</id>
    <content src="http://localhost:4000/posts/Android-Google-Login/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="Android" />
    
    <category term="라이브러리" />
    
  

  
    <summary>
      





      사전 준비

안드로이드에서 구글 로그인을 구현하기 위해서는 준비해야 될 게 몇 가지가 있습니다. 구글 클라우드에 들어가서 OAuth 클라이언트 아이디를 만들고 그 과정에서 본인의 앱을 등록해야 합니다. 그러므로 구체적으로 무엇을 먼저 준비해야 하는지 알아보겠습니다.


  파이어베이스에 앱을 등록해서 관리하는 것까지 할 예정이니 파이어베이스 과정이 필요없다면 해당 부분은 스킵하세요!


​

1. 구글 클라우드에서 클라이언트 아이디 생성


  
    구글 클라우드에 들어가서 오른쪽 상단의 콘솔 을 클릭합니다.
  
  
    API 및 서비스로 들어갑니다. (만약 프로젝트가 없다면 새 프로젝트부터 만들고 시작)
  
  
    왼쪽에 메뉴가 다섯 가지가 존재하는데 거기서 사용자 인증 정보를 클릭...
    </summary>
  

  </entry>

</feed>


