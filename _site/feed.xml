

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yoon-Min</title>
  <subtitle>부족한 개발 실력을 키우고 다른 사람들에게 도움이 되고 싶습니다.</subtitle>
  <updated>2023-10-23T23:33:12+09:00</updated>
  <author>
    <name>SeungMinYoon</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2023 SeungMinYoon </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>(프로그래머스 | C++) - 숫자 블록</title>
    <link href="http://localhost:4000/posts/KotlinAlgorithm4/" rel="alternate" type="text/html" title="(프로그래머스 | C++) - 숫자 블록" />
    <published>2023-10-16T20:00:00+09:00</published>
  
    <updated>2023-10-16T20:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinAlgorithm4/</id>
    <content src="http://localhost:4000/posts/KotlinAlgorithm4/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="알고리즘 문제" />
    
  

  
    <summary>
      





      해결 방법

이 문제의 핵심은 가장 큰 약수를 구하는 데 있다.  문제에서 블록의 번호가 n 이고 해당 블록은 n*2 n*3 … 이렇게 설치를 한다. 이것은 곧 약수가 됨을 의미한다. 예를 들어서 구간 10 에 설치될 블록의 번호 무엇일까? 바로  5 다. 왜 이렇게 나오는 것일까? 구간이 가지고 있는 약수들 중에서 본인을 제외한 가장 큰 숫자가 설치될 블록 번호이기 때문이다.

10 의 약수는 1, 2, 5, 10 인데 약수 1 부터 살펴보면 1*10 = 10 인 것을 알 수 있고 n=1 로 표현이 가능하다. 그래서 처음에는 구간 10 에 1 블록이 설치된다.  그 다음 블록 번호는 2 다. 마찬가지로 2*5=10 인 것을 알 수 있고 n=2 로 표현이 가능하다. 따라서 이미 설치된 1 블록에 2 블...
    </summary>
  

  </entry>

  
  <entry>
    <title>(프로그래머스 | Kotlin) - 이모티콘 할인행사</title>
    <link href="http://localhost:4000/posts/KotlinAlgorithm3/" rel="alternate" type="text/html" title="(프로그래머스 | Kotlin) - 이모티콘 할인행사" />
    <published>2023-10-11T20:00:00+09:00</published>
  
    <updated>2023-10-11T20:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinAlgorithm3/</id>
    <content src="http://localhost:4000/posts/KotlinAlgorithm3/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="알고리즘 문제" />
    
  

  
    <summary>
      





      해결방법

이 문제의 핵심은 emoticons 배열에 담겨 있는 이모티콘들의 할인율을 배정하는 것이다. 각 이모티콘은 각각 10, 20, 30, 40 퍼센트로 네 가지 할인율을 가질 수 있다. 따라서 각 이모티콘은 네 가지 중에서 하나의 할인율을 가진다. emoticons 의 최대 길이가 7 이므로 나올 수 있는 이모티콘들의 할인율의 경우의 수는 최대 4^7 개다.

나올 수 있는 최대 경우의 수가 4의 7승이라면 모든 경우를 탐색해도 지장이 없는 크기다. 따라서 완전 탐색을 통해 문제에서 요구하는 최대 효율을 가진 경우의 수(최대 효율을 내는 할인율 조합)를 찾을 수 있다. 완전 탐색을 위해서 모든 경우의 수를 구해야 하므로 백트래킹을 이용하여 나올 수 있는 모든 할인율 조합을 배열에 저장한다.

모...
    </summary>
  

  </entry>

  
  <entry>
    <title>(프로그래머스 | Kotlin) - 억억단을 외우자</title>
    <link href="http://localhost:4000/posts/KotlinAlgorithm2/" rel="alternate" type="text/html" title="(프로그래머스 | Kotlin) - 억억단을 외우자" />
    <published>2023-10-10T16:00:00+09:00</published>
  
    <updated>2023-10-11T20:18:32+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinAlgorithm2/</id>
    <content src="http://localhost:4000/posts/KotlinAlgorithm2/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="알고리즘 문제" />
    
  

  
    <summary>
      





      해결 방법

이 문제의 핵심은 약수의 개수를 구하는 데 있다.  특정 숫자의 약수 개수를 알아야 등장 빈도를 알 수 있기 때문이다. 예를 들어서 숫자 4 를 예시로 들어보겠다. 억억단 예시 사진을 보면 해당 숫자가 세 번 등장하는데 그 이유가 구구단, 1단부터 e 단까지를 행렬로 표현해서 1X4 4X1 2X2 이렇게 나오기 때문이다.

그럼 여기서 대충 약수와 관련이 있다는 것을 눈치챌 수 있다. 4 의 약수는 총 세 개, 1, 2, 4 이다. 가운데를 기준으로 특정 위치에 있는 숫자는 자신의 반대쪽에 있는 숫자와 곱을 하면 4 가 된다. 그래서 원래는 4 가 두 개가 나오는 것이 맞지만 억억단은 행과 열 둘 다 구구단이 존재하기 때문에 동일 숫자 곱(2X2)을 제외하고 각각 2배를 해줘야 한다. 따라...
    </summary>
  

  </entry>

  
  <entry>
    <title>(프로그래머스 | Kotlin) - 요격 시스템</title>
    <link href="http://localhost:4000/posts/KotlinAlgorithm1/" rel="alternate" type="text/html" title="(프로그래머스 | Kotlin) - 요격 시스템" />
    <published>2023-10-09T22:00:00+09:00</published>
  
    <updated>2023-10-11T20:18:32+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinAlgorithm1/</id>
    <content src="http://localhost:4000/posts/KotlinAlgorithm1/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="알고리즘 문제" />
    
  

  
    <summary>
      





      해결 방법

문제를 해석하면 특정 구간이 여러 개 주어지고 그 구간들을 전부 관통할 수 있는 최소의 폭격 미사일 수를 구해야 한다. 문제에서 그리디 알고리즘 문제를 좀 풀어봤다면 예시로 던져준 사진을 보자마자 그리디 문제임을 알아챘을 것이다. 따라서 이 문제는 그리디 알고리즘을 이용해서 해결하면 된다. 해결 순서는 다음과 같다.


  
    targets 내 특정 구간 i 에 대해서 targets[i][1] 을 기준으로 정렬한다.
  
  
    첫 폭격 미사일 설치 위치를 targets[0][1] 로 설정한다.

    var lastSpot = targets[0][1]
    
  
  
    반복문을 통해 정렬된 targets 내의 모든 원소들을 차례로 돌면서 현재 원소의 시작 위치가 la...
    </summary>
  

  </entry>

  
  <entry>
    <title>Android Navigation에 대해서 알아보자</title>
    <link href="http://localhost:4000/posts/Android-Navigation/" rel="alternate" type="text/html" title="Android Navigation에 대해서 알아보자" />
    <published>2023-05-05T00:00:00+09:00</published>
  
    <updated>2023-05-05T04:19:42+09:00</updated>
  
    <id>http://localhost:4000/posts/Android-Navigation/</id>
    <content src="http://localhost:4000/posts/Android-Navigation/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="Android" />
    
    <category term="라이브러리" />
    
  

  
    <summary>
      





      Jetpack에서 제공하는 Navigation

내비게이션(Navigation)은 안드로이드 Jetpack에서 제공하는 라이브러리 중 하나입니다. 내비게이션은 말 그대로 탐색을 지원하는 라이브러리며 기존의 방식보다 화면 전환을 쉽고 빠르고 유연하게 도와줍니다. 아마 안드로이드 앱 개발을 시작한 지 얼마 안 됐다면 꼭 알아야 하는 라이브러리 중 하나이지 않을까 싶습니다. 그래서 이번 포스팅은 내비게이션 라이브러리가 무엇이고 왜 사용하며 어떻게 사용하는지 알아보겠습니다.

​

기존의 화면 전환 방식

안드로이드에서 UI를 제공할 수 있는 창은 Activity 와 이에 종속되어서 부분 UI를 나타내는 Fragment 입니다. 그래서 안드로이드 앱 내에서 화면 전환이라 하면 보통 다음과 같이 세 가지가 있습...
    </summary>
  

  </entry>

</feed>


