

<feed xmlns="http://www.w3.org/2005/Atom">
  <id>http://localhost:4000/</id>
  <title>Yoon-Min</title>
  <subtitle>모르는 게 많으니까 기록하는 공간</subtitle>
  <updated>2024-08-05T16:49:04+09:00</updated>
  <author>
    <name>SeungMinYoon</name>
    <uri>http://localhost:4000/</uri>
  </author>
  <link rel="self" type="application/atom+xml" href="http://localhost:4000/feed.xml"/>
  <link rel="alternate" type="text/html" hreflang="en"
    href="http://localhost:4000/"/>
  <generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator>
  <rights> © 2024 SeungMinYoon </rights>
  <icon>/assets/img/favicons/favicon.ico</icon>
  <logo>/assets/img/favicons/favicon-96x96.png</logo>


  
  <entry>
    <title>Android - 내부 동작으로 살펴보는 LiveData의 생명주기(Lifecycle) 인식 원리</title>
    <link href="http://localhost:4000/posts/AndroidLiveDataLifecycle/" rel="alternate" type="text/html" title="Android - 내부 동작으로 살펴보는 LiveData의 생명주기(Lifecycle) 인식 원리" />
    <published>2024-08-02T00:00:00+09:00</published>
  
    <updated>2024-08-02T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/AndroidLiveDataLifecycle/</id>
    <content src="http://localhost:4000/posts/AndroidLiveDataLifecycle/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="Android" />
    
    <category term="라이브러리" />
    
  

  
    <summary>
      





      Unsplash의Nitish Meena

Intro

LiveData 는 관찰 가능한 UI 데이터 홀더 클래스입니다. 라이브 데이터는 안드로이드의 수명주기를 인식하여 수명주기에 맞춰 동작한다는 특징을 가지고 있어서 UI Layer에서 UI 데이터를 보유하는 역할을 수행합니다.

그런데 여기서 한 가지 궁금증이 생깁니다. 라이브 데이터가 안드로이드의 생명주기에 맞춰서 동작한다는 것은 알겠는데 어떻게 인식을 하는 걸까요? 이번 포스팅은 그 원리를 알아보는 시간을 가지고자 합니다.

​

Lifecycle

라이브 데이터를 분석하기 전에 먼저 생명주기에 대해서 알 필요가 있습니다. 보통 안드로이드에서 생명주기라 하면 액티비티 혹은 프래그먼트의 생명주기를 떠올릴 것입니다.

그 생명주기의 근간이 되는 클래스가...
    </summary>
  

  </entry>

  
  <entry>
    <title>Android - 화면 구성 변환에도 ViewModel 데이터가 보존될 수 있는 이유</title>
    <link href="http://localhost:4000/posts/ViewModelClear/" rel="alternate" type="text/html" title="Android - 화면 구성 변환에도 ViewModel 데이터가 보존될 수 있는 이유" />
    <published>2024-07-23T00:00:00+09:00</published>
  
    <updated>2024-07-23T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/ViewModelClear/</id>
    <content src="http://localhost:4000/posts/ViewModelClear/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="Android" />
    
    <category term="라이브러리" />
    
  

  
    <summary>
      





      

Intro

뷰모델은 ViewModelStoreOwner 가 사라질 때까지 메모리에 남아 있습니다. 덕분에 액티비티의 화면 구성 변경 후에도 뷰모델을 유지할 수 있습니다. 뷰모델이 파괴되는 조건은 다음과 같이 세 가지가 있습니다.


  액티비티가 완료될 때 -&amp;gt; onDestroy
  프래그먼트가 분리될 때
  네비게이션 백 스택에서 삭제될 때




그런데 여기서 궁금한 점이 생겼습니다. 대표적인 구성 변경인 화면 전환이 발생하면 분명 액티비티는 onDestroy 후에 onCreate 으로 재생성을 하는 과정을 거치는데 뷰모델의 파괴 조건에 따르면 이때 뷰모델도 파괴되어야 합니다. 하지만 구성 변경이 발생하면 뷰모델은  Clear 되지 않습니다.

안드로이드는 구성 변경과 같이 액티비티가 잠...
    </summary>
  

  </entry>

  
  <entry>
    <title>Google I/O Android Korea 2024 후기</title>
    <link href="http://localhost:4000/posts/GoogleIOAndroid/" rel="alternate" type="text/html" title="Google I/O Android Korea 2024 후기" />
    <published>2024-07-23T00:00:00+09:00</published>
  
    <updated>2024-07-23T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/GoogleIOAndroid/</id>
    <content src="http://localhost:4000/posts/GoogleIOAndroid/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="블로그" />
    
    <category term="회고록" />
    
  

  
    <summary>
      





      

처음 가보는 Android 행사

여태까지 Android를 다루는 행사에 참여해본 적이 없었는데 Google I/O를 통해 새로운 경험을 하게 되어서 매우 즐거웠다. 안드로이드 공부를 오랜만에 다시 시작한 탓에 내외부로 바뀐 것들에 대한 파악이 필요했었는데 마침 GDG에서 이를 알려주는 행사를 열어서 바로 찾아가게 된 것이 이번 행사의 참가 계기가 되겠다.

Android 행사 참여는 처음이지만 행사를 진행하는 구글 스타트업 캠퍼스는 너무나 익숙했다. 예전에 GDSC 활동을 할 때 잡페어 행사에 참가한 적이 있는데 그 행사를 구글 스타트업 캠퍼스에서 진행했었다. 그래서 한 번 가본 장소기 때문에 행사장은 문제 없이 잘 찾아갈 수 있었다.

분위기는 굉장히 자유롭고 편했다. 중간마다 간단한 마실 것과...
    </summary>
  

  </entry>

  
  <entry>
    <title>Android - ViewModel 생성과 반환</title>
    <link href="http://localhost:4000/posts/ViewModelCreation/" rel="alternate" type="text/html" title="Android - ViewModel 생성과 반환" />
    <published>2024-07-22T00:00:00+09:00</published>
  
    <updated>2024-07-23T16:54:55+09:00</updated>
  
    <id>http://localhost:4000/posts/ViewModelCreation/</id>
    <content src="http://localhost:4000/posts/ViewModelCreation/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="Android" />
    
    <category term="라이브러리" />
    
  

  
    <summary>
      





      

Intro

ViewModel 은 안드로이드의 UI 층을 구현하는 데 많은 도움을 주는 Jetpack 라이브러리입니다. 화면 구성의 변경이나 여러 프래그먼트에서 UI 상태 데이터를 보존하고 공유할 수 있다는 장점 덕분에 많은 사람들이 사용하고 있고, 저 역시 뷰모델을 애용하고 있습니다.

그러나 지금까지 뷰모델의 사용 방법과 역할만 숙지한 탓에 최근 내부 동작이 어떻게 되는지에 대한 이해가 매우 부족한 것을 느꼈습니다. 현재 계획하고 있는 프로젝트가 두 개이고 해당 프로젝트를 앞으로 제대로 수행하려면 사용하는 라이브러리에 대한 이해가 필요할 것 같아 이번 기회에 정리하고자 합니다.

​

ViewModel 관련 관계도



먼저 뷰모델 생성 및 관리에 관여하는 객체들의 관계도는 위 그림과 같습니다....
    </summary>
  

  </entry>

  
  <entry>
    <title>Kotlin Function (2/2) - 고차 함수와 inline</title>
    <link href="http://localhost:4000/posts/KotlinHighOrderFunction2/" rel="alternate" type="text/html" title="Kotlin Function (2/2) - 고차 함수와 inline" />
    <published>2024-04-01T00:00:00+09:00</published>
  
    <updated>2024-04-01T00:00:00+09:00</updated>
  
    <id>http://localhost:4000/posts/KotlinHighOrderFunction2/</id>
    <content src="http://localhost:4000/posts/KotlinHighOrderFunction2/" />
    <author>
      <name>yoonmin</name>
    </author>

  
    
    <category term="CS" />
    
    <category term="프로그래밍 언어" />
    
  

  
    <summary>
      





      

Contents


  
    함수 타입과 함수 리터럴

    1-1. Intro

    1-2. 코틀린 함수 타입

    1-3. 함수 리터럴 기반의 람다 표현식과 익명 함수

    1-4. 람다 함수와 익명 함수의 반환

    1-5. 정리

    1-6. 참조
  
  
    고차 함수와 inline

    2-1. Contents

    2-2. Intro

    2-3. 고차 함수를 활용해야 하는 이유

    2-4. 고차 함수 활용 시 주의사항

    2-5. 인라인 함수

    2-6. 인라인 관련 추가 기능

    2-7. 참조
  


​

Intro

저번 고차 함수와 인라인 1편에서 코틀린 함수가 왜 고차 함수인지 함수 타입과 함수 리터럴을 통해 알아봤...
    </summary>
  

  </entry>

</feed>


